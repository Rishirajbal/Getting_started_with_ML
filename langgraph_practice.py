# -*- coding: utf-8 -*-
"""langgraph_practice

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A6BPtYPvfmgzpuxvyPk5IbSWcoJGE0f7
"""

!pip install langgraph
!pip install langgraph
!pip install langchain
!pip install langsmith
!pip install langchain_groq
!pip install langchain_tavily
!pip install langchain-community
!pip install IPython

from langgraph.graph import START,END,StateGraph
from typing import Annotated
from typing_extensions import TypedDict
from langchain_groq import ChatGroq
from langchain_tavily import TavilySearch
import os
from langgraph.graph.message import add_messages

os.environ["GROQ_API_KEY"]=#your api
os.environ["TAVILY_API_KEY"]=#your api
model=ChatGroq(model="meta-llama/llama-4-scout-17b-16e-instruct",temperature=0.3)

class state(TypedDict):
  messages:Annotated[list,add_messages]

build=StateGraph(state)

def chatbot(state:state):
  return {"messages":[model.invoke(state["messages"])]}

build.add_node("RishiGPT+",chatbot)
build.add_edge(START,"RishiGPT+")
build.add_edge("RishiGPT+",END)

graph=build.compile()

from IPython.display import Image,display
try:
    display(Image(graph.get_graph().draw_mermaid_png()))
except Exception:
    pass

def multiply(a:int,b:int)->int:
    """ Multiply a and b
    Args:
        a(int)first int
        b(int):second int

        returns:
            int:output int
    """

tool=TavilySearch(max_results=4)
tools=[tool,multiply]

bind=model.bind_tools(tools)

from langgraph.prebuilt import ToolNode, tools_condition
from langgraph.graph import StateGraph, START, END

build1 = StateGraph(state)

def tool_calling_llm(state: state):
    return {"messages": [bind.invoke(state["messages"])]}

build1.add_node("tool_calling_llm", tool_calling_llm)
build1.add_node("tools", ToolNode(tools))

build1.add_edge(START,"tool_calling_llm")

build1.add_conditional_edges(
    "tool_calling_llm",
    tools_condition,
    {
        "tool_call": "tools",
        "continue": END
    }
)

build1.add_edge("tools", END)

graph = build1.compile()

from IPython.display import Image, display
try:
    display(Image(graph.get_graph().draw_mermaid_png()))
except Exception:
    pass
